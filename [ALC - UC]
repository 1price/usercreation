local Notify = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()

if not game:IsLoaded() then
    game.Loaded:wait()
end

task.wait(5)

local ACL_LoadTime = tick()

if getgenv().AntiChatLogger then
    return Notify.Notify({
        Title = "UserCreation ACL",
        Description = "Already loaded!",
        Duration = 5
    })
else
    getgenv().AntiChatLogger = true
end

local StarterGui = game:GetService("StarterGui")
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

-- Check for modern chat
if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    Notify.Notify({
        Title = "UserCreation ACL",
        Description = "TextChatService is enabled - Some features may not work!",
        Duration = 5
    })
    return
end

-- Setup metamethods and events
local Metatable = getrawmetatable(StarterGui)
setreadonly(Metatable, false)
local MessageEvent = Instance.new("BindableEvent")

-- Find chat module
local PlayerScripts = Player:WaitForChild("PlayerScripts")
local ChatMain = PlayerScripts:FindFirstChild("ChatMain", true)

if not ChatMain then
    local Timer = tick()
    repeat task.wait() until PlayerScripts:FindFirstChild("ChatMain", true) or tick() > (Timer + 3)
    ChatMain = PlayerScripts:FindFirstChild("ChatMain", true)
    
    if not ChatMain then
        Notify.Notify({
            Title = "UserCreation ACL",
            Description = "Legacy chat module not found!",
            Duration = 5
        })
        return
    end
end

local PostMessage = require(ChatMain).MessagePosted

if not PostMessage then
    Notify.Notify({
        Title = "UserCreation ACL",
        Description = "MessagePosted function not found!",
        Duration = 5
    })
    return
end

-- Hook chat function
if hookmetamethod then
    -- Hook namecall
    local CoreHook = hookmetamethod(StarterGui, "__namecall", newcclosure(function(self, ...)
        local Method = getnamecallmethod()
        local Args = {...}
        
        if self == StarterGui and not checkcaller() then
            if Method == "SetCore" and Args[1] == "CoreGuiChatConnections" then
                return
            end
        end
        
        return CoreHook(self, ...)
    end))

    -- Fix chatted event
    if not getgenv().ChattedFix then
        getgenv().ChattedFix = true
        hookmetamethod(Player, "__index", newcclosure(function(self, index)
            if self == Player and tostring(index):lower():match("chatted") and MessageEvent.Event then
                return MessageEvent.Event
            end
            return ChattedFix(self, index)
        end))
    end
end

-- Hook post message
local OldFunctionHook
OldFunctionHook = hookfunction(PostMessage.fire, function(self, Message)
    if self == PostMessage then
        MessageEvent:Fire(Message)
        return
    end
    return OldFunctionHook(self, Message)
end)

-- Disable screenshots
if setfflag then
    pcall(function()
        setfflag("AbuseReportScreenshot", "False")
        setfflag("AbuseReportScreenshotPercentage", "0")
    end)
end

-- Enable chat
local EnabledChat = task.spawn(function()
    repeat
        StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
        task.wait()
    until StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType.Chat)
end)

if CoreHook then
    setmetatable(Metatable, {__namecall = CoreHook}) 
end
setreadonly(Metatable, true)

Notify.Notify({
    Title = "UserCreation ACL",
    Description = "Loaded successfully!",
    Duration = 5
})
